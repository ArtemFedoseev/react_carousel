{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollPosition","listRef","React","createRef","calculateOffset","direction","props","step","frameSize","itemWidth","infinite","images","maxScrollPosition","length","offsetStep","offset","predictedScrollPosition","setScrollPosition","setState","isScrollImpossible","applyListAnimation","animationDuration","current","animate","transform","duration","easing","fill","this","containerSize","className","style","width","id","ref","map","imageUrl","i","src","alt","toString","type","onClick","disabled","Component","App","setFrameSize","event","newValue","currentTarget","value","setItemWidth","setAnimationDuration","setStepSize","toggleInfinite","onChange","min","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.884dc65f.chunk.js","sourcesContent":["import React, { RefObject } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  step: number,\n  infinite: boolean,\n}\n\ninterface State {\n  scrollPosition: number,\n}\n\ntype ScrollDirection = 'prev' | 'next';\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scrollPosition: 0,\n  };\n\n  listRef: RefObject<HTMLUListElement> = React.createRef();\n\n  calculateOffset = (direction: ScrollDirection) => {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n      images,\n    } = this.props;\n    const { scrollPosition } = this.state;\n\n    const listWidth = images.length * itemWidth;\n    const maxScrollPosition = -(listWidth - (frameSize * itemWidth));\n    const offsetStep = step * itemWidth;\n    let offset = direction === 'prev' ? offsetStep : -offsetStep;\n    const predictedScrollPosition = scrollPosition + offset;\n\n    if (infinite) {\n      if (scrollPosition === 0 && direction === 'prev') {\n        offset = maxScrollPosition;\n\n        return offset;\n      }\n\n      if (scrollPosition === maxScrollPosition && direction === 'next') {\n        offset = -maxScrollPosition;\n\n        return offset;\n      }\n    }\n\n    if (predictedScrollPosition > 0) {\n      offset -= predictedScrollPosition;\n    }\n\n    if (predictedScrollPosition < maxScrollPosition) {\n      offset -= (predictedScrollPosition - maxScrollPosition);\n    }\n\n    return offset;\n  };\n\n  setScrollPosition = (direction: ScrollDirection) => {\n    this.setState((state) => {\n      const offset = this.calculateOffset(direction);\n\n      return {\n        scrollPosition: state.scrollPosition + offset,\n      };\n    });\n  };\n\n  isScrollImpossible = (direction: ScrollDirection) => {\n    const offset = this.calculateOffset(direction);\n\n    return offset === 0;\n  };\n\n  applyListAnimation = () => {\n    const { scrollPosition } = this.state;\n    const { animationDuration } = this.props;\n\n    if (this.listRef.current) {\n      this.listRef.current.animate([\n        { transform: `translateX(${scrollPosition}px)` },\n      ],\n      {\n        duration: animationDuration,\n        easing: 'ease-in-out',\n        fill: 'forwards',\n      });\n    }\n  };\n\n  render() {\n    const { images, itemWidth, frameSize } = this.props;\n    const containerSize = itemWidth * frameSize;\n\n    this.applyListAnimation();\n\n    return (\n      <div className=\"carousel\">\n        <div\n          className=\"carousel__list-container\"\n          style={{ width: `${containerSize}px` }}\n        >\n          <ul id=\"list\" ref={this.listRef} className=\"carousel__list\">\n            {images.map((imageUrl, i) => (\n              <li key={i.toString()}>\n                <img\n                  src={imageUrl}\n                  alt={i.toString()}\n                  className=\"image\"\n                  style={{ width: `${itemWidth}px` }}\n                />\n              </li>\n            ))}\n          </ul>\n\n          <div className=\"buttons\">\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                this.setScrollPosition('prev');\n              }}\n              disabled={this.isScrollImpossible('prev')}\n            >\n              Prev\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                this.setScrollPosition('next');\n              }}\n              disabled={this.isScrollImpossible('next')}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  step: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    step: 3,\n    infinite: false,\n  };\n\n  setFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      frameSize: newValue,\n    });\n  };\n\n  setItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      itemWidth: newValue,\n    });\n  };\n\n  setAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      animationDuration: newValue,\n    });\n  };\n\n  setStepSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      step: newValue,\n    });\n  };\n\n  toggleInfinite = () => {\n    this.setState((state) => {\n      return {\n        infinite: !state.infinite,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      step,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"app\">\n          <h1>{`Carousel with ${images.length} images`}</h1>\n\n          <Carousel {...this.state} />\n          <div>\n            Item width:\n            {' '}\n            <input\n              type=\"number\"\n              value={itemWidth}\n              onChange={this.setItemWidth}\n              min={100}\n              max={200}\n            />\n          </div>\n          <div>\n            Number of images displayed:\n            {' '}\n            <input\n              type=\"number\"\n              value={frameSize}\n              onChange={this.setFrameSize}\n              min={0}\n              max={5}\n            />\n          </div>\n          <div>\n            Step size:\n            {' '}\n            <input\n              type=\"number\"\n              value={step}\n              onChange={this.setStepSize}\n              min={1}\n              max={5}\n            />\n          </div>\n          <div>\n            Animation duration:\n            {' '}\n            <input\n              type=\"number\"\n              value={animationDuration}\n              onChange={this.setAnimationDuration}\n              min={500}\n              max={5000}\n              step={100}\n            />\n          </div>\n          <div>\n            Infinite:\n            {' '}\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.toggleInfinite}\n            >\n              {infinite ? 'Turn off' : 'Turn on'}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}