{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollPosition","calculateOffset","direction","props","step","frameSize","itemWidth","infinite","images","maxScrollPosition","length","offsetStep","offset","predictedScrollPosition","setScrollPosition","setState","isScrollImpossible","this","animationDuration","list","document","getElementById","querySelectorAll","container","animate","transform","duration","easing","fill","style","width","i","applyStyles","className","id","map","imageUrl","src","alt","toString","type","onClick","disabled","React","Component","App","setFrameSize","event","newValue","currentTarget","value","setItemWidth","setAnimationDuration","setStepSize","toggleInfinite","onChange","min","max","ReactDOM","render"],"mappings":"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","file":"static/js/main.1a3521b8.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  step: number,\n  infinite: boolean,\n}\n\ninterface State {\n  scrollPosition: number,\n}\n\ntype ScrollDirection = 'prev' | 'next';\n\ntype ApplyStyles = Pick<Props, 'itemWidth' | 'frameSize' | 'animationDuration'> & State;\n\nconst applyStyles = ({\n  scrollPosition,\n  itemWidth,\n  frameSize,\n  animationDuration,\n}: ApplyStyles) => {\n  const list = document.getElementById('list');\n  const images = document.querySelectorAll<HTMLElement>('.image');\n  const container = document.getElementById('container');\n\n  if (list) {\n    list.animate([\n      { transform: `translateX(${scrollPosition}px)` },\n    ],\n    {\n      duration: animationDuration,\n      easing: 'ease-in-out',\n      fill: 'forwards',\n    });\n  }\n\n  if (container) {\n    container.style.width = `${itemWidth * frameSize}px`;\n  }\n\n  for (let i = 0; i < images.length; i += 1) {\n    images[i].style.width = `${itemWidth}px`;\n  }\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    scrollPosition: 0,\n  };\n\n  calculateOffset = (direction: ScrollDirection) => {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n      images,\n    } = this.props;\n    const { scrollPosition } = this.state;\n\n    const listWidth = images.length * itemWidth;\n    const maxScrollPosition = -(listWidth - (frameSize * itemWidth));\n    const offsetStep = step * itemWidth;\n    let offset = direction === 'prev' ? offsetStep : -offsetStep;\n    const predictedScrollPosition = scrollPosition + offset;\n\n    if (infinite) {\n      if (scrollPosition === 0 && direction === 'prev') {\n        offset = maxScrollPosition;\n\n        return offset;\n      }\n\n      if (scrollPosition === maxScrollPosition && direction === 'next') {\n        offset = -maxScrollPosition;\n\n        return offset;\n      }\n    }\n\n    if (predictedScrollPosition > 0) {\n      offset -= predictedScrollPosition;\n    }\n\n    if (predictedScrollPosition < maxScrollPosition) {\n      offset -= (predictedScrollPosition - maxScrollPosition);\n    }\n\n    return offset;\n  };\n\n  setScrollPosition = (direction: ScrollDirection) => {\n    this.setState((state) => {\n      const offset = this.calculateOffset(direction);\n\n      return {\n        scrollPosition: state.scrollPosition + offset,\n      };\n    });\n  };\n\n  isScrollImpossible = (direction: ScrollDirection) => {\n    const offset = this.calculateOffset(direction);\n\n    return offset === 0;\n  };\n\n  render() {\n    const { images } = this.props;\n    const { scrollPosition } = this.state;\n\n    applyStyles({ scrollPosition, ...this.props });\n\n    return (\n      <div className=\"carousel\">\n        <div\n          id=\"container\"\n          className=\"carousel__list-container\"\n        >\n          <ul id=\"list\" className=\"carousel__list\">\n            {images.map((imageUrl, i) => (\n              <li key={i.toString()}>\n                <img\n                  src={imageUrl}\n                  alt={i.toString()}\n                  className=\"image\"\n                />\n              </li>\n            ))}\n          </ul>\n\n          <div className=\"buttons\">\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                this.setScrollPosition('prev');\n              }}\n              disabled={this.isScrollImpossible('prev')}\n            >\n              Prev\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                this.setScrollPosition('next');\n              }}\n              disabled={this.isScrollImpossible('next')}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  step: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    step: 3,\n    infinite: false,\n  };\n\n  setFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      frameSize: newValue,\n    });\n  };\n\n  setItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      itemWidth: newValue,\n    });\n  };\n\n  setAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      animationDuration: newValue,\n    });\n  };\n\n  setStepSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = +event.currentTarget.value;\n\n    this.setState({\n      step: newValue,\n    });\n  };\n\n  toggleInfinite = () => {\n    this.setState((state) => {\n      return {\n        infinite: !state.infinite,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      step,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"app\">\n          {/* eslint-disable-next-line */}\n          <h1>Carousel with {images.length} images</h1>\n\n          <Carousel {...this.state} />\n          <div>\n            Item width:\n            {' '}\n            <input\n              type=\"number\"\n              value={itemWidth}\n              onChange={this.setItemWidth}\n              min={100}\n              max={200}\n            />\n          </div>\n          <div>\n            Number of images displayed:\n            {' '}\n            <input\n              type=\"number\"\n              value={frameSize}\n              onChange={this.setFrameSize}\n              min={0}\n              max={5}\n            />\n          </div>\n          <div>\n            Step size:\n            {' '}\n            <input\n              type=\"number\"\n              value={step}\n              onChange={this.setStepSize}\n              min={1}\n              max={5}\n            />\n          </div>\n          <div>\n            Animation duration:\n            {' '}\n            <input\n              type=\"number\"\n              value={animationDuration}\n              onChange={this.setAnimationDuration}\n              min={500}\n              max={5000}\n              step={100}\n            />\n          </div>\n          <div>\n            Infinite:\n            {' '}\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.toggleInfinite}\n            >\n              {infinite ? 'Turn off' : 'Turn on'}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}